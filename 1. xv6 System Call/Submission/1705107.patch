diff --git a/Makefile b/Makefile
index 39a99d7..73f14e6 100644
--- a/Makefile
+++ b/Makefile
@@ -132,6 +132,8 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_trace\
+	$U/_sysinfotest\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/kalloc.c b/kernel/kalloc.c
index 0699e7e..889fd6b 100644
--- a/kernel/kalloc.c
+++ b/kernel/kalloc.c
@@ -80,3 +80,22 @@ kalloc(void)
     memset((char*)r, 5, PGSIZE); // fill with junk
   return (void*)r;
 }
+
+
+// calculate the number of free memory available in the system in bytes
+
+uint64
+calcMem(void)
+{
+  uint64 freeBytes = 0;
+  struct run *rn = kmem.freelist;
+
+  acquire(&kmem.lock);
+  while (rn)
+  {
+    freeBytes += PGSIZE;
+    rn = rn->next;
+  }
+  release(&kmem.lock);
+  return freeBytes;
+}
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..075dd05 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -299,6 +299,10 @@ fork(void)
   // copy saved user registers.
   *(np->trapframe) = *(p->trapframe);
 
+
+  // copy the traceArg from parent to child process
+  np->traceArg = p->traceArg;
+
   // Cause fork to return 0 in the child.
   np->trapframe->a0 = 0;
 
@@ -681,3 +685,22 @@ procdump(void)
     printf("\n");
   }
 }
+
+
+// calculate the number of existing processes in the current system
+uint64
+existingProcCount(void)
+{
+  int npr = 0;
+  
+  struct proc *pr;
+  
+  for (pr = proc; pr< &proc[NPROC]; ++pr) 
+  {
+    acquire(&pr->lock);
+    if (pr->state != UNUSED)
+      ++npr;
+    release(&pr->lock);
+  }
+  return npr;
+}
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..edfd8af 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,6 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  
+  int traceArg;                // To remember traceArg
 };
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..2a8b208 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,8 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_trace(void);
+extern uint64 sys_sysinfo(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +128,35 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_trace]   sys_trace,
+[SYS_sysinfo]   sys_sysinfo,
+};
+
+
+char *syscallnames[] = {
+[SYS_fork]    "fork",
+[SYS_exit]    "exit",
+[SYS_wait]    "wait",
+[SYS_pipe]    "pipe",
+[SYS_read]    "read",
+[SYS_kill]    "kill",
+[SYS_exec]    "exec",
+[SYS_fstat]   "fstat",
+[SYS_chdir]   "chdir",
+[SYS_dup]     "dup",
+[SYS_getpid]  "getpid",
+[SYS_sbrk]    "sbrk",
+[SYS_sleep]   "sleep",
+[SYS_uptime]  "uptime",
+[SYS_open]    "open",
+[SYS_write]   "write",
+[SYS_mknod]   "mknod",
+[SYS_unlink]  "unlink",
+[SYS_link]    "link",
+[SYS_mkdir]   "mkdir",
+[SYS_close]   "close",
+[SYS_trace]   "trace",
+[SYS_sysinfo]  "sysinfo",
 };
 
 void
@@ -139,6 +170,13 @@ syscall(void)
     // Use num to lookup the system call function for num, call it,
     // and store its return value in p->trapframe->a0
     p->trapframe->a0 = syscalls[num]();
+    
+    //printing the trace output
+
+    if(num== (p->traceArg))
+    {
+      printf("pid: %d, syscall: %s, return value: %d\n", p->pid, syscallnames[num], p->trapframe->a0);
+    }
   } else {
     printf("%d %s: unknown sys call %d\n",
             p->pid, p->name, num);
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..2740484 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_trace  22
+#define SYS_sysinfo  23
\ No newline at end of file
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..f38e871 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -6,6 +6,9 @@
 #include "spinlock.h"
 #include "proc.h"
 
+extern uint64 calcMem(void);
+extern uint64 existingProcCount(void);
+
 uint64
 sys_exit(void)
 {
@@ -89,3 +92,27 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+// add sys_trace func
+uint64
+sys_trace(void)
+{
+  argint(0, &(myproc()->traceArg));
+  return 0;
+}
+
+
+// add sys_sysinfotest func
+uint64
+sys_sysinfo(void)
+{
+  uint64 freeMem = calcMem();
+  uint64 procCount = existingProcCount();
+  printf("\n");
+  printf("sysinfo system call prints:\n");
+  printf("free-memory: %d bytes\n", freeMem);
+  printf("n_proc : %d\n", procCount);
+  printf("\n");
+  return 0;
+}
+
diff --git a/user/user.h b/user/user.h
index 4d398d5..b8500b8 100644
--- a/user/user.h
+++ b/user/user.h
@@ -22,6 +22,8 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int trace(int);
+int sysinfo(void);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..bc109fd 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,5 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("trace");
+entry("sysinfo");
