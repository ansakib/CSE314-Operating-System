diff --git a/Makefile b/Makefile
index 39a99d7..597ac8c 100644
--- a/Makefile
+++ b/Makefile
@@ -24,6 +24,7 @@ OBJS = \
   $K/sleeplock.o \
   $K/file.o \
   $K/pipe.o \
+  $K/swap.o \
   $K/exec.o \
   $K/sysfile.o \
   $K/kernelvec.o \
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..d5d1856 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -8,6 +8,9 @@ struct spinlock;
 struct sleeplock;
 struct stat;
 struct superblock;
+struct swap;
+struct livePageST;
+struct swapRecordST;
 
 // bio.c
 void            binit(void);
@@ -36,6 +39,8 @@ int             filewrite(struct file*, uint64, int n);
 
 // fs.c
 void            fsinit(int);
+uint            balloc(uint dev);
+void            bfree(int dev, uint b);
 int             dirlink(struct inode*, char*, uint);
 struct inode*   dirlookup(struct inode*, char*, uint*);
 struct inode*   ialloc(uint, short);
@@ -107,6 +112,13 @@ int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
 
+// swap.c
+void            swapinit(void);
+void            swapfree(struct swap*);
+struct swap*    swapalloc(void);
+void            swapout(struct swap *dst_sp, char *src_pa);
+void            swapin(char *dst_pa, struct swap *src_sp);
+
 // swtch.S
 void            swtch(struct context*, struct context*);
 
@@ -162,9 +174,9 @@ void            kvmmap(pagetable_t, uint64, uint64, uint64, int);
 int             mappages(pagetable_t, uint64, uint64, uint64, int);
 pagetable_t     uvmcreate(void);
 void            uvmfirst(pagetable_t, uchar *, uint);
-uint64          uvmalloc(pagetable_t, uint64, uint64, int);
+uint64          uvmalloc(pagetable_t, uint64, uint64, int, int);
 uint64          uvmdealloc(pagetable_t, uint64, uint64);
-int             uvmcopy(pagetable_t, pagetable_t, uint64);
+int             uvmcopy(pagetable_t, pagetable_t, uint64, int);
 void            uvmfree(pagetable_t, uint64);
 void            uvmunmap(pagetable_t, uint64, uint64, int);
 void            uvmclear(pagetable_t, uint64);
diff --git a/kernel/exec.c b/kernel/exec.c
index e18bbb6..09f962c 100644
--- a/kernel/exec.c
+++ b/kernel/exec.c
@@ -62,7 +62,7 @@ exec(char *path, char **argv)
     if(ph.vaddr % PGSIZE != 0)
       goto bad;
     uint64 sz1;
-    if((sz1 = uvmalloc(pagetable, sz, ph.vaddr + ph.memsz, flags2perm(ph.flags))) == 0)
+    if((sz1 = uvmalloc(pagetable, sz, ph.vaddr + ph.memsz, flags2perm(ph.flags), p->pid)) == 0)
       goto bad;
     sz = sz1;
     if(loadseg(pagetable, ph.vaddr, ip, ph.off, ph.filesz) < 0)
@@ -80,7 +80,7 @@ exec(char *path, char **argv)
   // Use the second as the user stack.
   sz = PGROUNDUP(sz);
   uint64 sz1;
-  if((sz1 = uvmalloc(pagetable, sz, sz + 2*PGSIZE, PTE_W)) == 0)
+  if((sz1 = uvmalloc(pagetable, sz, sz + 2*PGSIZE, PTE_W, p->pid)) == 0)
     goto bad;
   sz = sz1;
   uvmclear(pagetable, sz-2*PGSIZE);
diff --git a/kernel/fs.c b/kernel/fs.c
index c6bab15..2d9b419 100644
--- a/kernel/fs.c
+++ b/kernel/fs.c
@@ -62,7 +62,7 @@ bzero(int dev, int bno)
 
 // Allocate a zeroed disk block.
 // returns 0 if out of disk space.
-static uint
+uint
 balloc(uint dev)
 {
   int b, bi, m;
@@ -88,7 +88,7 @@ balloc(uint dev)
 }
 
 // Free a disk block.
-static void
+void
 bfree(int dev, uint b)
 {
   struct buf *bp;
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..d04b21e 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -264,7 +264,7 @@ growproc(int n)
 
   sz = p->sz;
   if(n > 0){
-    if((sz = uvmalloc(p->pagetable, sz, sz + n, PTE_W)) == 0) {
+    if((sz = uvmalloc(p->pagetable, sz, sz + n, PTE_W, p->pid)) == 0) {
       return -1;
     }
   } else if(n < 0){
@@ -289,7 +289,7 @@ fork(void)
   }
 
   // Copy user memory from parent to child.
-  if(uvmcopy(p->pagetable, np->pagetable, p->sz) < 0){
+  if(uvmcopy(p->pagetable, np->pagetable, p->sz, np->pid) < 0){
     freeproc(np);
     release(&np->lock);
     return -1;
diff --git a/kernel/riscv.h b/kernel/riscv.h
index 20a01db..393bd48 100644
--- a/kernel/riscv.h
+++ b/kernel/riscv.h
@@ -343,6 +343,10 @@ typedef uint64 *pagetable_t; // 512 PTEs
 #define PTE_W (1L << 2)
 #define PTE_X (1L << 3)
 #define PTE_U (1L << 4) // user can access
+#define PTE_S (1L << 8) // to keep track if the page is swapped out
+                        // 1 means swapped to disk
+
+#define MAX_LIVE_PAGES 50
 
 // shift a physical address to the right place for a PTE.
 #define PA2PTE(pa) ((((uint64)pa) >> 12) << 10)
diff --git a/kernel/swap.c b/kernel/swap.c
new file mode 100644
index 0000000..f33bf40
--- /dev/null
+++ b/kernel/swap.c
@@ -0,0 +1,135 @@
+#include "types.h"
+#include "riscv.h"
+#include "fs.h"
+#include "spinlock.h"
+#include "defs.h"
+#include "param.h"
+#include "sleeplock.h"
+#include "buf.h"
+
+#define NBLOCKPERPAGE (PGSIZE / BSIZE)
+
+struct swap {
+  uint blocknos[NBLOCKPERPAGE];
+};
+
+struct run {
+  struct run *next;
+};
+
+struct {
+  struct spinlock lock;
+  struct run *freelist;
+} swapmem;
+
+// Initialize swapmem
+void
+swapinit(void)
+{
+  initlock(&swapmem.lock, "swapmem");
+  swapmem.freelist = 0;
+}
+
+// Allocate one swap struct.
+// Returns a pointer to the swap struct.
+// Returns 0 if the memory cannot be allocated.
+struct swap *
+swapalloc(void)
+{
+  struct run *r;
+  struct swap *s;
+
+  acquire(&swapmem.lock);
+  r = swapmem.freelist;
+  if(!r){
+    release(&swapmem.lock);
+    char *mem = kalloc();
+    char *mem_end = mem + PGSIZE;
+    for(; mem + sizeof(struct swap) <= mem_end; mem += sizeof(struct swap)){
+      r = (struct run*)mem;
+
+      acquire(&swapmem.lock);
+      r->next = swapmem.freelist;
+      swapmem.freelist = r;
+      release(&swapmem.lock);
+    }
+    acquire(&swapmem.lock);
+    r = swapmem.freelist;
+  }
+  swapmem.freelist = r->next;
+  release(&swapmem.lock);
+  
+  s = (struct swap*)r;
+  if(s)
+    memset((char*)s->blocknos, 0, sizeof(s->blocknos)); // fill with zeros
+  
+  return s;
+}
+
+// Free the swap struct pointed by s, and the blocks
+// contained in s, which normally should have been returned
+// by a call to swapalloc() and swapout().
+void
+swapfree(struct swap *s)
+{
+  uint *blockno;
+  struct run *r;
+
+  if(!s)
+    panic("swapfree");
+  
+  begin_op();
+  for(blockno = s->blocknos; blockno < &s->blocknos[NBLOCKPERPAGE]; blockno++){
+    if(*blockno)
+      bfree(ROOTDEV, *blockno);
+  }
+  end_op();
+
+  r = (struct run*)s;
+
+  acquire(&swapmem.lock);
+  r->next = swapmem.freelist;
+  swapmem.freelist = r;
+  release(&swapmem.lock);
+}
+
+// Swap out a given physical page src_pa to disk.
+// The metadata for retriving src_pa will be saved
+// to dst_pa which normally should have been returned
+// by a call to swapalloc().
+void
+swapout(struct swap *dst_sp, char *src_pa)
+{
+  uint *blockno;
+  struct buf *bp;
+  
+  begin_op();
+  for(blockno = dst_sp->blocknos; blockno < &dst_sp->blocknos[NBLOCKPERPAGE]; blockno++, src_pa += BSIZE){
+    *blockno = balloc(ROOTDEV);
+    if(*blockno == 0)
+      panic("swapout");
+    bp = bread(ROOTDEV, *blockno);
+    memmove(bp->data, src_pa, BSIZE);
+    log_write(bp);
+    brelse(bp);
+  }
+  end_op();
+}
+
+// Swap in a page into dst_pa from disk using src_sp.
+// src_sp should normally be updated with metadata
+// for retriving the page by a call to swapout().
+void
+swapin(char *dst_pa, struct swap *src_sp)
+{
+  uint *blockno;
+  struct buf *bp;
+  
+  if(!dst_pa)
+    panic("swapin");
+  for(blockno = src_sp->blocknos; blockno < &src_sp->blocknos[NBLOCKPERPAGE]; blockno++, dst_pa += BSIZE){
+    bp = bread(ROOTDEV, *blockno);
+    memmove(dst_pa, bp->data, BSIZE);
+    brelse(bp);
+  }
+}
diff --git a/kernel/vm.c b/kernel/vm.c
index 9f69783..933ce42 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -15,6 +15,23 @@ extern char etext[];  // kernel.ld sets this to end of kernel code.
 
 extern char trampoline[]; // trampoline.S
 
+struct livePageST {
+  int pid;
+  uint64 va;
+};
+
+struct livePageST livePageList[MAX_LIVE_PAGES];
+int livePageCount = 0;
+
+struct swapRecordST {
+  int pid;
+  uint64 va;
+  struct swap *sp;
+};
+
+struct swapRecordST swapRecordList[1000];
+int swapRecordCount = 0;
+
 // Make a direct-map page table for the kernel.
 pagetable_t
 kvmmake(void)
@@ -179,7 +196,7 @@ uvmunmap(pagetable_t pagetable, uint64 va, uint64 npages, int do_free)
   for(a = va; a < va + npages*PGSIZE; a += PGSIZE){
     if((pte = walk(pagetable, a, 0)) == 0)
       panic("uvmunmap: walk");
-    if((*pte & PTE_V) == 0)
+    if((*pte & PTE_V) == 0 && (*pte & PTE_S)==0)
       panic("uvmunmap: not mapped");
     if(PTE_FLAGS(*pte) == PTE_V)
       panic("uvmunmap: not a leaf");
@@ -223,7 +240,7 @@ uvmfirst(pagetable_t pagetable, uchar *src, uint sz)
 // Allocate PTEs and physical memory to grow process from oldsz to
 // newsz, which need not be page aligned.  Returns new size or 0 on error.
 uint64
-uvmalloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz, int xperm)
+uvmalloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz, int xperm, int pid)
 {
   char *mem;
   uint64 a;
@@ -244,6 +261,54 @@ uvmalloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz, int xperm)
       uvmdealloc(pagetable, a, oldsz);
       return 0;
     }
+    //if a page is allocated, add it to the livepage list
+    //if pages are non-executable, add them to the livepage list
+    if((xperm & PTE_X) == 0 && livePageCount < MAX_LIVE_PAGES){
+      livePageList[livePageCount].pid = pid;
+      livePageList[livePageCount].va = a;
+      livePageCount++;
+    }
+    else{
+      //swap a live page to disk
+      //add new page to livepagelist
+      
+      //allocate a swap struct using swap alloc
+      struct swap *dst_sp = swapalloc();
+      pte_t *pte;
+      uint64 live_va;
+      live_va = livePageList[0].va;
+      if((pte = walk(pagetable, live_va, 0)) == 0)
+        panic("uvmalloc: walk");
+      
+      uint64 pa = PTE2PA(*pte);
+      swapout(dst_sp, (char*)pa);
+
+      //make pte_v=0, and pte_s=1
+      *pte = *pte & ~PTE_V;
+      *pte = *pte | PTE_S;
+
+      //move array to left by 1
+      for(int i = 0; i < livePageCount - 1; i++){
+        livePageList[i].pid = livePageList[i+1].pid;
+        livePageList[i].va = livePageList[i+1].va;
+      }
+      livePageCount--;
+
+      //add to swaprecord list
+      swapRecordList[swapRecordCount].pid = pid;
+      swapRecordList[swapRecordCount].va = live_va;
+      swapRecordList->sp = dst_sp;
+      swapRecordCount++;
+
+
+      //free physical address
+      kfree((void*)pa);
+
+      //add to livepagelist
+      livePageList[livePageCount].pid = pid;
+      livePageList[livePageCount].va = a;
+    }
+    
   }
   return newsz;
 }
@@ -303,7 +368,7 @@ uvmfree(pagetable_t pagetable, uint64 sz)
 // returns 0 on success, -1 on failure.
 // frees any allocated pages on failure.
 int
-uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
+uvmcopy(pagetable_t old, pagetable_t new, uint64 sz, int pid)
 {
   pte_t *pte;
   uint64 pa, i;
@@ -313,8 +378,23 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
   for(i = 0; i < sz; i += PGSIZE){
     if((pte = walk(old, i, 0)) == 0)
       panic("uvmcopy: pte should exist");
-    if((*pte & PTE_V) == 0)
+    if((*pte & PTE_V) == 0 && (*pte & PTE_S)==0)
       panic("uvmcopy: page not present");
+    
+    //check if page is live or swapped out
+    int isLive = 0;
+    int isSwapped = 0;
+
+    if((*pte & PTE_X)==0){
+      //page is live
+      isLive = 1;
+    }
+    else {
+      //page is swapped out
+      isSwapped = 1;
+    }
+
+
     pa = PTE2PA(*pte);
     flags = PTE_FLAGS(*pte);
     if((mem = kalloc()) == 0)
@@ -324,6 +404,140 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
       kfree(mem);
       goto err;
     }
+
+    if(isLive){
+      //add mem to livepagelist
+      if(livePageCount < MAX_LIVE_PAGES){
+        livePageList[livePageCount].pid = pid;
+        livePageList[livePageCount].va = i;
+        livePageCount++;
+      }
+      else{
+        //swap a live page to disk
+        struct swap *dst_sp = swapalloc();
+        pte_t *pte;
+        uint64 live_va;
+        live_va = livePageList[0].va;
+        if((pte = walk(new, live_va, 0)) == 0)
+          panic("uvmcopy: walk");
+        
+        //swap out
+        uint64 pa = PTE2PA(*pte);
+        swapout(dst_sp, (char*)pa);
+
+        //make pte_v=0, and pte_s=1
+        *pte = *pte & ~PTE_V;
+        *pte = *pte | PTE_S;
+
+        //remove from livepagelist
+        for(int i = 0; i < livePageCount - 1; i++){
+          livePageList[i].pid = livePageList[i+1].pid;
+          livePageList[i].va = livePageList[i+1].va;
+        }
+        livePageCount--;
+
+        //add to swaprecord list
+        swapRecordList[swapRecordCount].pid = pid;
+        swapRecordList[swapRecordCount].va = live_va;
+        swapRecordList->sp = dst_sp;
+        swapRecordCount++;
+
+        //free physical address
+        kfree((void*)pa);
+
+        //add to livepagelist
+        livePageList[livePageCount].pid = pid;
+        livePageList[livePageCount].va = i;
+
+      }
+    }
+    else if(isSwapped){
+      //swap in the page from disk
+      //then memmove
+
+      //find the swap record
+      struct swap *src_sp = swapalloc();
+      int pos = -1;
+      for(int i = 0; i < swapRecordCount; i++){
+        if(swapRecordList[i].pid == pid && swapRecordList[i].va == i){
+          src_sp = swapRecordList[i].sp;
+          pos = i;
+          break;
+        }
+      }
+
+      //remove from swap record list
+      for(int i = pos; i < swapRecordCount - 1; i++){
+        swapRecordList[i].pid = swapRecordList[i+1].pid;
+        swapRecordList[i].va = swapRecordList[i+1].va;
+        swapRecordList[i].sp = swapRecordList[i+1].sp;
+      }
+      swapRecordCount--;
+
+      //swapin();
+      char* dst_pa =(char*) kalloc();
+      swapin(dst_pa, src_sp);
+      //memmove
+      memmove(mem, dst_pa, PGSIZE);
+
+      
+      pte_t *pte;
+      if((pte = walk(new, i, 0)) == 0)
+        panic("uvmcopy: walk");
+      //make pte_s=0, and pte_v=1
+      *pte = *pte & ~PTE_S;
+      *pte = *pte | PTE_V;
+
+
+      //add to livepagelist
+      if(livePageCount < MAX_LIVE_PAGES){
+        livePageList[livePageCount].pid = pid;
+        livePageList[livePageCount].va = i;
+        livePageCount++;
+      }
+      else{
+        //swap a live page to disk
+        struct swap *dst_sp = swapalloc();
+        pte_t *pte;
+        uint64 live_va;
+        live_va = livePageList[0].va;
+        if((pte = walk(new, live_va, 0)) == 0)
+          panic("uvmcopy: walk");
+        
+        //swap out
+        uint64 pa = PTE2PA(*pte);
+        swapout(dst_sp, (char*)pa);
+
+        //make pte_v=0, and pte_s=1
+        *pte = *pte & ~PTE_V;
+        *pte = *pte | PTE_S;
+
+        //remove from livepagelist
+        for(int i = 0; i < livePageCount - 1; i++){
+          livePageList[i].pid = livePageList[i+1].pid;
+          livePageList[i].va = livePageList[i+1].va;
+        }
+        livePageCount--;
+
+        //add to swaprecord list
+        swapRecordList[swapRecordCount].pid = pid;
+        swapRecordList[swapRecordCount].va = live_va;
+        swapRecordList->sp = dst_sp;
+        swapRecordCount++;
+
+        //free physical address
+        kfree((void*)pa);
+
+        //add to livepagelist
+        livePageList[livePageCount].pid = pid;
+        livePageList[livePageCount].va = i;
+
+      }
+
+      
+      swapfree(src_sp);
+    }
+
   }
   return 0;
 
